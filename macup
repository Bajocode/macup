#!/bin/sh

trap 'ret=$?; test $ret -ne 0 && printf "macup failed\n\n" >&2; exit $ret' EXIT

ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_GREEN=$ESC_SEQ"92;01m"
COL_CYAN=$ESC_SEQ"96;01m"
COL_MAGENTA=$ESC_SEQ"95;01m"

echo_do() {
  echo "\n$COL_CYAN  Installing $@ ...$COL_RESET\n"
}

echo_done() {
  echo "\n$COL_GREEN  Successfully installed $@ !$COL_RESET\n"
}

echo_ok() {
  echo "\n$COL_MAGENTA  Already installed $@ ...$COL_RESET\n"
}

echo_plain() {
  echo "\n$1\n"
}

prompt_password() {
  echo_plain "Enter your sudo password once for the entire script"
  
  sudo -v

  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

configure_macos_defaults() {
  local component="macOS defaults"

  echo_do $component

  # always boot in verbose mode (not MacOS GUI mode)
  sudo nvram boot-args="-v"
  # show the $HOME/Library folder
  chflags nohidden $HOME/Library                                                          
  # show hidden files by default
  defaults write com.apple.finder AppleShowAllFiles -bool true                            
  # donâ€™t animate opening applications from the Dock
  defaults write com.apple.dock launchanim -bool false                                    
  # dock orientation: 'left', 'bottom', 'right'
  defaults write com.apple.dock 'orientation' -string 'left'
  # set the icon size of Dock items to 36 pixels
  defaults write com.apple.dock tilesize -int 36                                          
  # automatically hide and show the Dock
  defaults write com.apple.dock autohide -bool true                                       
  # remove the auto-hiding Dock delay
  defaults write com.apple.dock autohide-delay -float 0                                   
  
  killall -9 Dock
  echo_done $component
}

install_xcode_cli() {
  local component="Xcode cli tools"

  xcode-select -p &> /dev/null
  if [ $? -ne 0 ]; then
    echo_do $component

    touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress;
    PROD=$(softwareupdate -l |
      grep "\*.*Command Line" |
      head -n 1 | awk -F"*" '{print $2}' |
      sed -e 's/^ *//' |
      tr -d '\n')
    softwareupdate -i "$PROD" -v;

    echo_done $component
  else
    echo_ok $component
  fi
}

install_homebrew() {
  local component="Homebrew"
  local brew_prefix="/usr/local"

  if [ -d "$brew_prefix" ]; then
    if ! [ -r "$brew_prefix" ]; then
        sudo chown -R "$LOGNAME:admin" /usr/local 
    fi
  else
    sudo mkdir "$brew_prefix"
    sudo chflags norestricted "$brew_prefix"
    sudo chown -R "$LOGNAME:admin" "$brew_prefix"
  fi

  if ! command -v brew >/dev/null; then
    echo_do $component

    curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
    export PATH="/usr/local/bin:$PATH"

    echo_done $component
  else
    echo_ok $component
  fi

  if brew list | grep -Fq brew-cask; then
    brew uninstall --force brew-cask
  fi

  brew update --force
}

update_formulae() {
  local component="Homebrew formulae"

  echo_do $component

brew bundle --file=- <<EOF
cask_args appdir: '/Applications'

tap "homebrew/services"

brew "python"
brew "go"
brew "cmake"
brew "zsh"
brew "vim"
brew "kubernetes-cli"
brew "kubectx"
brew "kube-ps1"
brew "stern"

cask "docker"
cask "visual-studio-code"
cask "rectangle"
cask "iterm2"
cask "spotify"
cask "google-chrome"
cask "dropbox"
EOF

  echo_done $component
}

install_vim_awesome() {
  local component="Vim awesome"

  if [ ! -d $HOME/.vim_runtime ]; then
    echo_do $component

    git clone --depth=1 https://github.com/amix/vimrc.git $HOME/.vim_runtime
    sh $HOME/.vim_runtime/install_awesome_vimrc.sh

    echo_done $component
  else
    echo_ok $component
  fi
}

install_ohmyzsh() {
  local component="ohmyzsh"

  echo_do $component

  git clone https://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh
  cp $HOME/.oh-my-zsh/templates/zshrc.zsh-template $HOME/.zshrc
  sed -i '' 's/ZSH_THEME="robbyrussell"/ZSH_THEME="refined"/g' $HOME/.zshrc

  echo_done $component
}

install_node() {
  local component="Node with nvm"

  if [ ! -d $HOME/.nvm ]; then
    echo_do $component

    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | zsh
    NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
    nvm install 'lts/*'
    nvm alias default 'lts/*'

    echo_done $component
  else
    echo_ok $component
  fi
}

reload_shell() {
  local component="Zsh"
  local current_shell=$(basename "$SHELL")

  if [ "$current_shell" != "zsh" ]; then
    echo_do $component

    if hash chsh >/dev/null 2>&1; then
      chsh -s $(grep /zsh$ /etc/shells | tail -1)
    else
      echo_do "Unable to change shell automatically because this system has no chsh"
      echo_do "Please manually change your default shell to zsh"
    fi

    echo_done $component
    
    zsh
  else 
    echo_ok $component
  fi
}

prompt_password
configure_macos_defaults
install_xcode_cli
install_homebrew
update_formulae
install_vim_awesome
install_ohmyzsh
install_node
reload_shell
